if (!requireNamespace("dplyr", quietly = TRUE)) {
+     install.packages("dplyr")
+ }
> if (!requireNamespace("MASS", quietly = TRUE)) {
+     install.packages("MASS")
+ }
> library(MASS)
> library(dplyr)

Attaching package: ‘dplyr’

The following object is masked from ‘package:MASS’:

    select

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> control <- read.table("C:/Users/sharv/Downloads/control.txt", header=TRUE)
> 
> View(control)
> treated <- read.table("C:/Users/sharv/Downloads/treated.txt", header=TRUE)
> View(treated)
> full_model <- lm(Total ~ ., data=control)
> 
> View(full_model)
> step_model <- stepAIC(full_model, direction = "backward")
Start:  AIC=191.89
Total ~ Sp.Lim + Av.Sp + X85. + X.ov.lim + X.15.ov.lim + Flow + 
    Road.class + Road.type

              Df Sum of Sq     RSS    AIC
- Sp.Lim       1     1.304  899.25 189.99
- Road.type    1     8.584  906.53 190.53
<none>                      897.95 191.89
- X.15.ov.lim  1    33.233  931.18 192.33
- X.ov.lim     1    48.536  946.49 193.42
- X85.         1    76.560  974.51 195.38
- Road.class   1    81.674  979.62 195.73
- Flow         1    93.417  991.37 196.52
- Av.Sp        1   110.777 1008.73 197.69

Step:  AIC=189.99
Total ~ Av.Sp + X85. + X.ov.lim + X.15.ov.lim + Flow + Road.class + 
    Road.type

              Df Sum of Sq     RSS    AIC
- Road.type    1     9.307  908.56 188.68
<none>                      899.25 189.99
- X.15.ov.lim  1    32.645  931.90 190.38
- X85.         1    75.274  974.53 193.38
- Road.class   1    82.275  981.53 193.86
- Flow         1   101.079 1000.33 195.13
- X.ov.lim     1   118.125 1017.38 196.26
- Av.Sp        1   122.987 1022.24 196.58

Step:  AIC=188.68
Total ~ Av.Sp + X85. + X.ov.lim + X.15.ov.lim + Flow + Road.class

              Df Sum of Sq     RSS    AIC
<none>                      908.56 188.68
- X.15.ov.lim  1    31.318  939.88 188.95
- X85.         1    73.617  982.18 191.90
- Road.class   1    89.676  998.24 192.99
- Flow         1    99.201 1007.76 193.62
- X.ov.lim     1   113.337 1021.90 194.56
- Av.Sp        1   122.724 1031.28 195.17
> 
> final_formula <- formula(step_model)
> 
> final_formula
Total ~ Av.Sp + X85. + X.ov.lim + X.15.ov.lim + Flow + Road.class
> nb_model <- glm.nb(final_formula, data=control)
Warning message:
In glm.nb(final_formula, data = control) : alternation limit reached
> 
> View(nb_model)
> summary(nb_model)

Call:
glm.nb(formula = final_formula, data = control, init.theta = 2.609855415, 
    link = log)

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept)  2.201e+00  5.656e-01   3.892 9.95e-05 ***
Av.Sp       -2.851e-02  6.893e-02  -0.414 0.679142    
X85.        -1.353e-02  6.364e-02  -0.213 0.831640    
X.ov.lim    -1.683e-02  4.528e-03  -3.717 0.000202 ***
X.15.ov.lim  2.093e-02  1.295e-02   1.616 0.106165    
Flow         5.904e-05  1.717e-05   3.439 0.000584 ***
Road.class   2.943e-01  1.004e-01   2.931 0.003382 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for Negative Binomial(2.6099) family taken to be 1)

    Null deviance: 120.099  on 66  degrees of freedom
Residual deviance:  75.369  on 60  degrees of freedom
AIC: 325.66

Number of Fisher Scoring iterations: 1


              Theta:  2.610 
          Std. Err.:  0.823 
Warning while fitting theta: alternation limit reached 

 2 x log-likelihood:  -309.658 
> 
> View(nb_model)
> View(treated)
> treated <- treated %>%
+     mutate(total = fatal + serious + slight)
Error in `mutate()`:
ℹ In argument: `total = fatal + serious + slight`.
Caused by error:
! object 'fatal' not found
Run `rlang::last_trace()` to see where the error occurred.
> treated <- treated %>%
+     mutate(total = Fatal + Serious + Slight)
> View(control)
> View(nb_model)
> before_treated <- treated[, c("Av.Sp", "X85.", "X.ov.lim" , "X.15.ov.lim" "Flow", "Road.Class" )]
Error: unexpected string constant in "before_treated <- treated[, c("Av.Sp", "X85.", "X.ov.lim" , "X.15.ov.lim" "Flow""
> before_treated <- treated[, c("Av.Sp","X85.","X.ov.lim","X.15.ov.lim","Flow","Road.Class")]
> View(before_treated) 
> View(nb_model)
> nb_model[["coefficients"]]
  (Intercept)         Av.Sp          X85.      X.ov.lim   X.15.ov.lim 
 2.201164e+00 -2.851243e-02 -1.352977e-02 -1.683275e-02  2.092842e-02 
         Flow    Road.class 
 5.903562e-05  2.943221e-01 
> > View(full_model)
> View(nb_model)
> View(step_model)
> View(treated)
> View(before_treated)
> nb_model[["theta"]]
[1] 2.609855
> nb_model[["coefficients"]]
  (Intercept)         Av.Sp          X85.      X.ov.lim   X.15.ov.lim 
 2.201164e+00 -2.851243e-02 -1.352977e-02 -1.683275e-02  2.092842e-02 
         Flow    Road.class 
 5.903562e-05  2.943221e-01 
> coefficients <- nb_model[["coefficients"]]
> 
> # Check the names of coefficients
> print(names(coefficients))
[1] "(Intercept)" "Av.Sp"       "X85."        "X.ov.lim"   
[5] "X.15.ov.lim" "Flow"        "Road.class" 
> 
> # Check the names of columns in before_treated
> print(names(before_treated))
[1] "Av.Sp"       "X85."        "X.ov.lim"    "X.15.ov.lim"
[5] "Flow"        "Road.Class" 
> 
> before_treated <- before_treated %>%
+     mutate(intercept = 1)
> before_treated <- before_treated[ ,c("Intercept", "Av.Sp" ,"X85.", "X.ov.lim" ,"X.15.ov.lim",  "Flow" , "Road.Class") ]
Error in `[.data.frame`(before_treated, , c("Intercept", "Av.Sp", "X85.",  : 
  undefined columns selected
> before_treated <- before_treated[ ,c("intercept", "Av.Sp" ,"X85.", "X.ov.lim" ,"X.15.ov.lim",  "Flow" , "Road.Class") ]
> before_treated <- before_treated %>%
+     rowwise() %>%
+     mutate(reg = sum(c_across(all_of(names(coefficients))) * coefficients)) %>%
+     ungroup()
Error in `mutate()`:
ℹ In argument: `reg =
  sum(c_across(all_of(names(coefficients))) *
  coefficients)`.
ℹ In row 1.
Caused by error in `c_across()`:
ℹ In argument: `all_of(names(coefficients))`.
Caused by error in `all_of()`:
! Can't subset elements that don't exist.
✖ Elements `(Intercept)` and `Road.class` don't exist.
Run `rlang::last_trace()` to see where the error occurred.
> > 
Error: unexpected '>' in ">"
> > 
Error: unexpected '>' in ">"
> # Check the names of coefficients
> print(names(coefficients))
[1] "(Intercept)" "Av.Sp"       "X85."       
[4] "X.ov.lim"    "X.15.ov.lim" "Flow"       
[7] "Road.class" 
> 
> # Check the names of columns in before_treated
> print(names(before_treated))
[1] "intercept"   "Av.Sp"       "X85."       
[4] "X.ov.lim"    "X.15.ov.lim" "Flow"       
[7] "Road.Class" 
> 
> before_treated <- before_treated %>%
+     rename(`(Intercept)` = intercept)
> before_treated <- before_treated %>%
+     rowwise() %>%
+     mutate(reg = sum(c_across(all_of(names(coefficients))) * coefficients)) %>%
+     ungroup()
Error in `mutate()`:
ℹ In argument: `reg =
  sum(c_across(all_of(names(coefficients))) *
  coefficients)`.
ℹ In row 1.
Caused by error in `c_across()`:
ℹ In argument: `all_of(names(coefficients))`.
Caused by error in `all_of()`:
! Can't subset elements that don't exist.
✖ Element `Road.class` doesn't exist.
Run `rlang::last_trace()` to see where the error occurred.
> before_treated <- before_treated %>%
+     +     rename(`Road.class` = Road.Class)
Error: object 'Road.Class' not found
> before_treated <- before_treated %>%
+     +     rename(`Road.Class` = Road.class)
Error: object 'Road.class' not found
> # Check the names of coefficients
> print(names(coefficients))
[1] "(Intercept)" "Av.Sp"       "X85."       
[4] "X.ov.lim"    "X.15.ov.lim" "Flow"       
[7] "Road.class" 
> 
> # Check the names of columns in before_treated
> print(names(before_treated))
[1] "(Intercept)" "Av.Sp"       "X85."       
[4] "X.ov.lim"    "X.15.ov.lim" "Flow"       
[7] "Road.Class" 
> 
> before_treated <- before_treated %>%
+     rename(Road.class = Road.Class)
> # Check the names of coefficients
> print(names(coefficients))
[1] "(Intercept)" "Av.Sp"       "X85."       
[4] "X.ov.lim"    "X.15.ov.lim" "Flow"       
[7] "Road.class" 
> 
> # Check the names of columns in before_treated
> print(names(before_treated))
[1] "(Intercept)" "Av.Sp"       "X85."       
[4] "X.ov.lim"    "X.15.ov.lim" "Flow"       
[7] "Road.class" 
> 
> before_treated <- before_treated %>%
+     rowwise() %>%
+     mutate(reg = sum(c_across(all_of(names(coefficients))) * coefficients)) %>%
+     ungroup()
> before_treated$reg1 <- rowSums(before_treated[, names(coefficients)] * coefficients)
> 
> View(nb_model)
> nb_model[["coefficients"]]
  (Intercept)         Av.Sp          X85. 
 2.201164e+00 -2.851243e-02 -1.352977e-02 
     X.ov.lim   X.15.ov.lim          Flow 
-1.683275e-02  2.092842e-02  5.903562e-05 
   Road.class 
 2.943221e-01 
> before_treated <- before_treated %>%
+     rowwise() %>%
+     mutate(
+         reg1 = `(Intercept)` * coefficients["(Intercept)"] +
+             Av.Sp * coefficients["Av.Sp"] +
+             X85. * coefficients["X85."] +
+             X.ov.lim * coefficients["X.ov.lim"] +
+             X.15.ov.lim * coefficients["X.15.ov.lim"] +
+             Flow * coefficients["Flow"] +
+             Road.class * coefficients["Road.class"]
+     ) %>%
+     ungroup()
> # Add a new column 'mu' which is the exponential of 'reg'
> before_treated <- before_treated %>%
+     mutate(mu = exp(reg))
> treated <- treated %>%
+         mutate(Total = Fatal + Serious + Slight)
> 
> # Add 'Total' column from 'treated' to 'before_treated'
> before_treated <- before_treated %>%
+     mutate(Total = treated %>% pull(Total))
> # View the updated dataset
> print(before_treated)
# A tibble: 56 × 11
   `(Intercept)` Av.Sp  X85. X.ov.lim X.15.ov.lim
           <dbl> <int> <int>    <int>       <int>
 1             1    55    63       20           9
 2             1    51    60        9           1
 3             1    60    67       31           4
 4             1    38    46        1           0
 5             1    57    67        7           1
 6             1    55    63       20           1
 7             1    65    76       57           8
 8             1    32    39       63           2
 9             1    28    33       19           1
10             1    41    38       45           1
# ℹ 46 more rows
# ℹ 6 more variables: Flow <dbl>, Road.class <int>,
#   reg <dbl>, reg1 <dbl>, mu <dbl>, Total <int>
# ℹ Use `print(n = ...)` to see more rows
> View(nb_model[["model"]])
> View(nb_model)
> print(nb_model)

Call:  glm.nb(formula = final_formula, data = control, init.theta = 2.609855415, 
    link = log)

Coefficients:
(Intercept)        Av.Sp         X85.     X.ov.lim  X.15.ov.lim         Flow   Road.class  
  2.201e+00   -2.851e-02   -1.353e-02   -1.683e-02    2.093e-02    5.904e-05    2.943e-01  

Degrees of Freedom: 66 Total (i.e. Null);  60 Residual
Null Deviance:	    120.1 
Residual Deviance: 75.37 	AIC: 325.7
# Assuming nb_model is your negative binomial model
theta_value <- nb_model$theta
before_treated <- before_treated %>%
mutate(alpha = theta_value / (theta_value + mu))

# Add the 'E(m|y)' column to before_treated
before_treated <- before_treated %>%
mutate(`E(m|y)` = (alpha * mu) + ((1 - alpha) * Total))
